diff --git a/Cargo.toml b/Cargo.toml
index 7527c94..73a8b75 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -8,12 +8,9 @@ edition = "2018"
 license = "MIT"
 
 [dependencies]
-ffms2-sys = "0.2.0"
+ffms2-sys = { path = "ffms2-sys" }
 cfg-if = "1.0"
 paste = "1.0"
 
 [dev-dependencies]
 structopt = "0.3"
-
-[workspace]
-members = ["ffms2-sys"]
diff --git a/src/audio.rs b/src/audio.rs
index 59dac9e..b9cf93c 100644
--- a/src/audio.rs
+++ b/src/audio.rs
@@ -127,7 +127,7 @@ impl AudioSource {
         }
 
         let num_channels = audio_prop.Channels;
-        let num_elements = Count * num_channels as usize;
+        let num_elements = (audio_prop.BitsPerSample as usize / 8) * Count * num_channels as usize;
 
         let Buf: Vec<T> = Vec::with_capacity(num_elements);
         let mut Buf = mem::ManuallyDrop::new(Buf);
diff --git a/src/utility.rs b/src/utility.rs
index 9ce5de7..7425a0e 100644
--- a/src/utility.rs
+++ b/src/utility.rs
@@ -1,6 +1,6 @@
 extern crate paste;
 
-#[macro_use]
+//#[macro_use]
 macro_rules! simple_enum {
     ($enum:ident, ($($field_name:ident),*$(,)*)) => {
         #[derive(Clone, Copy, Debug)]
@@ -10,7 +10,7 @@ macro_rules! simple_enum {
     }
 }
 
-#[macro_use]
+//#[macro_use]
 macro_rules! create_enum {
     ($enum:ident, $type:ident, $func_name:ident,
     ($($field_name:ident),*$(,)*)) => {
@@ -31,7 +31,7 @@ macro_rules! create_enum {
     }
 }
 
-#[macro_use]
+//#[macro_use]
 macro_rules! from_i32 {
     ($enum:ident, $type:ident,
     ($($field_name:ident),*$(,)*)) => {
@@ -50,7 +50,7 @@ macro_rules! from_i32 {
     }
 }
 
-#[macro_use]
+//#[macro_use]
 macro_rules! display {
     ($enum:ident, ($($field_name:ident: $field_err:expr),*$(,)*)) => {
         impl fmt::Display for $enum {
@@ -67,7 +67,7 @@ macro_rules! display {
     }
 }
 
-#[macro_use]
+//#[macro_use]
 macro_rules! errors {
     ($enum:ident, $type:ident,
     ($($field_name:ident: $field_err:expr),*$(,)*)) => {
@@ -81,7 +81,7 @@ macro_rules! errors {
     }
 }
 
-#[macro_use]
+//#[macro_use]
 macro_rules! set_struct {
     ($struct:ident, $param:ident, $type:tt) => {
         pub struct $struct {
@@ -90,7 +90,7 @@ macro_rules! set_struct {
     };
 }
 
-#[macro_use]
+//#[macro_use]
 macro_rules! default_struct {
     ($struct:ident, $param:ident, $type:tt,
      ($($field_name:ident),*$(,)*),
@@ -107,7 +107,7 @@ macro_rules! default_struct {
     }
 }
 
-#[macro_use]
+//#[macro_use]
 macro_rules! implement_deref {
     ($struct:ident, $param:ident, $type:tt) => {
         impl std::ops::Deref for $struct {
@@ -126,7 +126,7 @@ macro_rules! implement_deref {
     };
 }
 
-#[macro_use]
+//#[macro_use]
 macro_rules! create_struct {
     ($struct:ident, $param:ident, $type:tt,
      ($($field_name:ident),*$(,)*),
